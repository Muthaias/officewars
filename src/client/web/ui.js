var controlPosition = "main menu"; // || side menu
var themes = [
    "base",
    "dark"
]
function resize() {
    const canvas = document.getElementById("canv");
    const controlDiv = document.getElementById("control");
    const contributeDiv = document.getElementById("contribute");
    const themeDiv = document.getElementById("theme");
    canvas.width = canvas.offsetWidth;
    canvas.height = canvas.offsetHeight;

    if (controlPosition == "main menu") {
        controlDiv.classList.add("menu")
        controlDiv.classList.remove("game")
        contributeDiv.classList.remove("hidden")
        themeDiv.classList.remove("hidden")
    } else {
        controlDiv.classList.remove("menu")
        controlDiv.classList.add("game")
        contributeDiv.classList.add("hidden")
        themeDiv.classList.add("hidden")
    }
}

function setTheme(themeId) {
    const theme = document.getElementById("theme");
    theme.innerHTML = `
<select id="theme-select">
    ${themes.map(t => `<option value="${t}" ${t === themeId ? "selected" : ""}>${t}</option>`).join("\n")}
</select>
    `
    const themeSelect = document.getElementById("theme-select")
    themeSelect.onchange = handleSetTheme
    const body = document.getElementById("main")
    for (const t of themes) {
        body.classList.remove("theme-" + t)
    }
    body.classList.add("theme-" + themeId)
    localStorage.setItem("themeId", themeId)
}

function handleSetTheme(e) {
    setTheme(e.target.value)
}

function start() {
    // Prevent right-click menu on canvas.
    const canvas = document.getElementById("canv");
    canvas.addEventListener('contextmenu', (e) => {
        if (e.button == 2) {
            e.preventDefault();
        }
    });
    setTheme(localStorage.getItem("themeId") || themes[0])

    window.onresize = function () {
        resize();
    };
    resize();
}

const gameData = (
`1
TOIKKL
ESD, ready, set, fight!
2
2
7
Jannis
#0059c1
REDACT
Uusivuori
#ff3700
REDACT
Tomas
#cb2039
REDACT
Olop
#a058b0
REDACT
Ola
#87ad2b
REDACT
starwall
#5f4b7f
REDACT
Anders
#bdbbd7
REDACT
21
000100000011000000000
000000000000010100010
000000000100100000011
100000100010001000000
000000000101000000100
000000010010010000000
000100001000000011000
000001000010011000000
000000100000000011001
001010000000000000101
100101010000000000000
100010000000000000100
001000000000000100011
010001010000000100000
000100010000000000000
010000000000110000010
000000101000000001000
000000101000000010000
000010000101000000000
011000000000100100000
001000001100100000000
-0.98507,-0.44535,-0.86988
-1.26471,0.68083,-0.95168
-0.35549,0.38869,-1.17546
-1.18046,-0.28594,-0.47248
-0.62846,0.18673,-1.95775
-1.68592,-0.14399,-0.81051
-0.30100,-0.34401,-0.53606
-1.57373,-0.10698,-0.41501
-0.01071,-0.21894,-0.95809
-0.23372,0.27738,-1.45843
-1.35960,-0.41631,-0.68576
-0.62216,-0.18864,-1.65214
-0.31658,0.42366,-0.86449
-1.51305,0.16707,-0.80396
-1.36705,-0.10304,-0.06382
-1.05627,0.30580,-0.79057
0.15830,-0.25540,-0.70687
0.68481,-0.07568,-0.79087
-0.32881,-0.03247,-1.97542
-0.78020,0.42787,-0.94021
-0.05851,0.19039,-1.17894
2
5
0
4294967295
4
4294967295
4294967295
1
3
4294967295
4294967295
4294967295
6
4294967295
4294967295
4294967295
4294967295
4294967295
4294967295
4294967295
4294967295
12
6
4
4
18
0
2
0
3
0
1
7
5
0
0
2
20
0
6
12
19
0
3
8
6
0
11
3
6
16
0
3
8
17
0
0
2
9
0
0
20
2
1
2
3
10
0
2
0
11
0
1
7
14
0
1
5
13
0
6
19
15
0
4
4
11
0
4
18
11
0
15
2
0
11
0
2
3
6
0
2
10
3
1
0
20
8
0
0
9
20
1
0
2
20
1
4
18
11
0
6
19
1
0
6
15
19
1
4
4
11
0
3
8
20
0
3
6
8
1
3
16
8
1
3
17
8
1
5
1
15
1
19
1
13
1
0
1
5
13
1
1
7
13
1
4
4
11
0
4
18
11
1
6
15
13
0
6
1
15
1
2
10
0
1
2
3
10
1
2
0
11
0
2
6
17
0
3
17
6
0
3
16
17
1
3
8
17
1
0
20
8
0
0
2
20
1
0
9
20
1
6
19
15
1
6
12
20
1
18
0
8
17
0
0
20
8
1
0
9
2
1
0
2
20
1
1
1
15
0
1
13
1
1
1
7
13
1
1
5
13
1
6
19
1
0
6
15
13
0
6
12
19
1
3
17
8
0
3
6
17
1
3
16
17
1
2
3
6
0
2
0
10
1
2
10
3
1
2
11
4
0
21
0
9
18
0
0
2
9
1
0
8
17
0
0
20
8
1
6
15
13
0
6
19
2
0
6
1
19
1
6
12
20
0
1
7
13
1
1
14
7
1
1
13
15
0
1
5
13
1
3
16
6
0
3
17
16
1
4
18
11
0
4
4
18
1
2
3
6
1
2
6
8
0
2
11
18
0
2
0
11
1
2
10
3
1
21
3
16
8
0
3
17
16
1
0
20
12
0
0
9
20
1
6
1
13
0
6
19
15
0
6
2
19
1
6
12
19
1
1
13
1
0
1
7
13
1
1
14
7
1
4
4
9
0
4
18
18
1
1
15
12
0
2
3
6
1
2
6
17
0
2
8
16
0
2
10
3
1
2
0
11
1
2
11
18
0
1
5
14
1
20
0
20
9
1
0
9
18
0
1
13
15
0
1
1
19
0
1
7
13
1
1
5
13
1
1
14
7
1
6
15
13
0
6
12
15
1
6
19
15
1
6
2
19
1
2
6
16
0
2
8
20
0
2
17
8
1
2
18
9
0
2
0
11
1
2
10
10
1
3
16
17
0
2
11
18
1
2
3
6
1
10
6
19
15
0
6
12
19
1
6
2
19
1
1
15
12
0
1
13
15
1
1
1
19
0
1
14
7
1
1
5
7
1
1
7
5
1
0
20
2
0
21
2
16
8
1
2
8
20
0
2
11
4
0
2
0
11
1
2
18
9
1
2
9
2
0
2
10
7
0
1
12
2
0
2
6
3
1
1
15
12
1
1
13
1
1
1
1
19
0
2
17
8
1
0
20
2
0
6
19
15
0
6
2
19
1
2
3
14
0
1
7
14
1
1
5
7
1
1
14
7
1
4
4
18
0
16
1
1
19
1
1
15
12
1
1
13
7
1
1
7
14
0
1
5
10
0
2
14
7
0
2
3
14
1
2
10
5
0
2
0
10
1
2
9
2
0
2
4
9
1
2
20
12
0
2
8
20
1
1
19
12
1
1
12
2
0
6
2
12
0
0
`
);

const singleGameData = (
`TOIKKL
ESD, ready, set, fight!
1
4294967295
7
Jannis
#0059c1
REDACT
Uusivuori
#ff3700
REDACT
Tomas
#cb2039
REDACT
Olop
#a058b0
REDACT
Ola
#87ad2b
REDACT
starwall
#5f4b7f
REDACT
Anders
#bdbbd7
REDACT
21
000100000011000000000
000000000000010100010
000000000100100000011
100000100010001000000
000000000101000000100
000000010010010000000
000100001000000011000
000001000010011000000
000000100000000011001
001010000000000000101
100101010000000000000
100010000000000000100
001000000000000100011
010001010000000100000
000100010000000000000
010000000000110000010
000000101000000001000
000000101000000010000
000010000101000000000
011000000000100100000
001000001100100000000
-0.98507,-0.44535,-0.86988
-1.26471,0.68083,-0.95168
-0.35549,0.38869,-1.17546
-1.18046,-0.28594,-0.47248
-0.62846,0.18673,-1.95775
-1.68592,-0.14399,-0.81051
-0.30100,-0.34401,-0.53606
-1.57373,-0.10698,-0.41501
-0.01071,-0.21894,-0.95809
-0.23372,0.27738,-1.45843
-1.35960,-0.41631,-0.68576
-0.62216,-0.18864,-1.65214
-0.31658,0.42366,-0.86449
-1.51305,0.16707,-0.80396
-1.36705,-0.10304,-0.06382
-1.05627,0.30580,-0.79057
0.15830,-0.25540,-0.70687
0.68481,-0.07568,-0.79087
-0.32881,-0.03247,-1.97542
-0.78020,0.42787,-0.94021
-0.05851,0.19039,-1.17894
2
5
0
4294967295
4
4294967295
4294967295
1
3
4294967295
4294967295
4294967295
6
4294967295
4294967295
4294967295
4294967295
4294967295
4294967295
4294967295
4294967295
11
6
4
4
18
0
2
0
3
0
1
7
5
0
0
2
20
0
6
12
19
0
3
8
6
0
11
3
6
16
0
3
8
17
0
0
2
9
0
0
20
2
1
2
3
10
0
2
0
11
0
1
7
14
0
1
5
13
0
6
19
15
0
4
4
11
0
4
18
11
0
15
2
0
11
0
2
3
6
0
2
10
3
1
0
20
8
0
0
9
20
1
0
2
20
1
4
18
11
0
6
19
1
0
6
15
19
1
4
4
11
0
3
8
20
0
3
6
8
1
3
16
8
1
3
17
8
1
5
1
15
1
19
1
13
1
0
1
5
13
1
1
7
13
1
4
4
11
0
4
18
11
1
6
15
13
0
6
1
15
1
2
10
0
1
2
3
10
1
2
0
11
0
2
6
17
0
3
17
6
0
3
16
17
1
3
8
17
1
0
20
8
0
0
2
20
1
0
9
20
1
6
19
15
1
6
12
20
1
18
0
8
17
0
0
20
8
1
0
9
2
1
0
2
20
1
1
1
15
0
1
13
1
1
1
7
13
1
1
5
13
1
6
19
1
0
6
15
13
0
6
12
19
1
3
17
8
0
3
6
17
1
3
16
17
1
2
3
6
0
2
0
10
1
2
10
3
1
2
11
4
0
21
0
9
18
0
0
2
9
1
0
8
17
0
0
20
8
1
6
15
13
0
6
19
2
0
6
1
19
1
6
12
20
0
1
7
13
1
1
14
7
1
1
13
15
0
1
5
13
1
3
16
6
0
3
17
16
1
4
18
11
0
4
4
18
1
2
3
6
1
2
6
8
0
2
11
18
0
2
0
11
1
2
10
3
1
21
3
16
8
0
3
17
16
1
0
20
12
0
0
9
20
1
6
1
13
0
6
19
15
0
6
2
19
1
6
12
19
1
1
13
1
0
1
7
13
1
1
14
7
1
4
4
9
0
4
18
18
1
1
15
12
0
2
3
6
1
2
6
17
0
2
8
16
0
2
10
3
1
2
0
11
1
2
11
18
0
1
5
14
1
20
0
20
9
1
0
9
18
0
1
13
15
0
1
1
19
0
1
7
13
1
1
5
13
1
1
14
7
1
6
15
13
0
6
12
15
1
6
19
15
1
6
2
19
1
2
6
16
0
2
8
20
0
2
17
8
1
2
18
9
0
2
0
11
1
2
10
10
1
3
16
17
0
2
11
18
1
2
3
6
1
10
6
19
15
0
6
12
19
1
6
2
19
1
1
15
12
0
1
13
15
1
1
1
19
0
1
14
7
1
1
5
7
1
1
7
5
1
0
20
2
0
21
2
16
8
1
2
8
20
0
2
11
4
0
2
0
11
1
2
18
9
1
2
9
2
0
2
10
7
0
1
12
2
0
2
6
3
1
1
15
12
1
1
13
1
1
1
1
19
0
2
17
8
1
0
20
2
0
6
19
15
0
6
2
19
1
2
3
14
0
1
7
14
1
1
5
7
1
1
14
7
1
4
4
18
0
0
`
);

Module.onRuntimeInitialized = () => {
    const loadGameList = Module.cwrap('loadGameList', 'number', ['string', 'number'])
    const loadGame = Module.cwrap('loadGame', 'number', ['string', 'number'])
    const getGameCount = Module.cwrap('getGameCount', 'number', ['number'])
    const getGame = Module.cwrap('getGame', 'number', ['number', 'number'])
    const getGameName = Module.cwrap('getGameName', 'string', ['number', 'number'])
    const getPlayerCount = Module.cwrap('getPlayerCount', 'number', ['number'])
    const getPlayerName = Module.cwrap('getPlayerName', 'string', ['number', 'number'])
    const getPlayerColor = Module.cwrap('getPlayerColor', 'string', ['number', 'number'])
    const getNodeCount = Module.cwrap('getNodeCount', 'number', ['number'])
    const getNodeConnected = Module.cwrap('getNodeConnected', 'number', ['number', 'number', 'number'])
    const getNodeControlledBy = Module.cwrap('getNodeControlledBy', 'number', ['number', 'number'])
    const getTurnCount = Module.cwrap('getTurnCount', 'number', ['number'])
    const stepGameHistory = Module.cwrap('stepGameHistory', 'number', ['number', 'number'])

    const gameList = loadGameList(gameData, gameData.length)
    const gameCount = getGameCount(gameList)
    console.log(gameCount)
    const game = loadGame(singleGameData, singleGameData.length)
    console.log(getGameName(game))

    const playerCount = getPlayerCount(game)
    console.log(playerCount)
    const players = Array.from({length: playerCount}).map((_, index) => ({
        name: getPlayerName(game, index),
        color: getPlayerColor(game, index),
    }))
    console.log(players)
    const nodeCount = getNodeCount(game)
    const turnCount = getTurnCount(game)
    for (let i = 0; i < turnCount; i++) {
        stepGameHistory(game, i)
        console.log("Turn:", Array.from({length: nodeCount}).map(
            (_, index) => getNodeControlledBy(game, index)
        ))
    }
}